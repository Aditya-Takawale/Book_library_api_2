"""enhance_models_with_rbac_and_relationships

Revision ID: f2c44b2f35d5
Revises: 9a385a344ba4
Create Date: 2025-09-03 16:17:56.614579

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'f2c44b2f35d5'
down_revision: Union[str, Sequence[str], None] = '9a385a344ba4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create book_loans table
    op.create_table('book_loans',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('book_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('loan_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('due_date', sa.DateTime(timezone=True), nullable=False),
        sa.Column('return_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('status', sa.Enum('ACTIVE', 'RETURNED', 'OVERDUE', 'RENEWED', name='loanstatus'), nullable=False),
        sa.Column('renewal_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('fine_amount', sa.DECIMAL(precision=10, scale=2), nullable=False, server_default='0.00'),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['book_id'], ['books.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_loan_status_due_date', 'book_loans', ['status', 'due_date'], unique=False)
    op.create_index('idx_loan_user_status', 'book_loans', ['user_id', 'status'], unique=False)
    op.create_index('idx_loan_book_status', 'book_loans', ['book_id', 'status'], unique=False)

    # Create book_reservations table
    op.create_table('book_reservations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('book_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('reservation_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('expiry_date', sa.DateTime(timezone=True), nullable=False),
        sa.Column('status', sa.Enum('PENDING', 'FULFILLED', 'EXPIRED', 'CANCELLED', name='reservationstatus'), nullable=False),
        sa.Column('notification_sent', sa.Boolean(), nullable=False, server_default='0'),
        sa.Column('priority', sa.Integer(), nullable=False, server_default='1'),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['book_id'], ['books.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_reservation_status_priority', 'book_reservations', ['status', 'priority'], unique=False)
    op.create_index('idx_reservation_user_status', 'book_reservations', ['user_id', 'status'], unique=False)
    op.create_index('idx_reservation_book_status', 'book_reservations', ['book_id', 'status'], unique=False)
    op.add_column('authors', sa.Column('created_by', sa.Integer(), nullable=True))
    op.add_column('authors', sa.Column('updated_by', sa.Integer(), nullable=True))
    op.alter_column('authors', 'is_living',
               existing_type=mysql.INTEGER(),
               type_=sa.Boolean(),
               nullable=False)
    op.alter_column('authors', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('authors', 'updated_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               nullable=False)
    op.create_index('idx_author_birth_year', 'authors', ['birth_year'], unique=False)
    op.create_index('idx_author_created_at', 'authors', ['created_at'], unique=False)
    op.create_index('idx_author_is_living', 'authors', ['is_living'], unique=False)
    op.create_index('idx_author_name_nationality', 'authors', ['full_name', 'nationality'], unique=False)
    op.create_index(op.f('ix_authors_nationality'), 'authors', ['nationality'], unique=False)
    op.create_foreign_key(None, 'authors', 'users', ['updated_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'authors', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.add_column('book_authors', sa.Column('role', sa.String(length=50), nullable=True))
    op.add_column('book_authors', sa.Column('order', sa.Integer(), nullable=True))
    op.add_column('book_authors', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
    op.drop_constraint(op.f('book_authors_ibfk_1'), 'book_authors', type_='foreignkey')
    op.drop_constraint(op.f('book_authors_ibfk_2'), 'book_authors', type_='foreignkey')
    op.create_foreign_key(None, 'book_authors', 'books', ['book_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'book_authors', 'authors', ['author_id'], ['id'], ondelete='CASCADE')
    op.alter_column('book_reviews', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('book_reviews', 'updated_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.add_column('books', sa.Column('reserved_copies', sa.Integer(), nullable=False))
    op.add_column('books', sa.Column('view_count', sa.Integer(), nullable=False))
    op.add_column('books', sa.Column('download_count', sa.Integer(), nullable=False))
    op.add_column('books', sa.Column('popularity_score', sa.Integer(), nullable=False))
    op.add_column('books', sa.Column('created_by', sa.Integer(), nullable=True))
    op.add_column('books', sa.Column('updated_by', sa.Integer(), nullable=True))
    op.alter_column('books', 'is_available',
               existing_type=mysql.INTEGER(),
               type_=sa.Boolean(),
               existing_nullable=False)
    op.alter_column('books', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               nullable=False)
    op.alter_column('books', 'updated_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               nullable=False)
    op.create_index('idx_book_availability', 'books', ['is_available', 'available_copies'], unique=False)
    op.create_index('idx_book_created_at', 'books', ['created_at'], unique=False)
    op.create_index('idx_book_popularity', 'books', ['popularity_score', 'view_count'], unique=False)
    op.create_index('idx_book_publisher_year', 'books', ['publisher', 'publication_year'], unique=False)
    op.create_index('idx_book_title_genre', 'books', ['title', 'genre'], unique=False)
    op.create_index(op.f('ix_books_genre'), 'books', ['genre'], unique=False)
    op.create_index(op.f('ix_books_language'), 'books', ['language'], unique=False)
    op.create_index(op.f('ix_books_publisher'), 'books', ['publisher'], unique=False)
    op.create_foreign_key(None, 'books', 'users', ['updated_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'books', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.alter_column('request_logs', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('review_votes', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.add_column('users', sa.Column('status', sa.Enum('ACTIVE', 'SUSPENDED', 'PENDING', 'DELETED', name='userstatus'), nullable=False))
    op.add_column('users', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('failed_login_attempts', sa.Integer(), nullable=False))
    op.alter_column('users', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.create_index('idx_user_created_at', 'users', ['created_at'], unique=False)
    op.create_index('idx_user_email_status', 'users', ['email', 'status'], unique=False)
    op.create_index('idx_user_role_status', 'users', ['role', 'status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop book_reservations table
    op.drop_index('idx_reservation_book_status', table_name='book_reservations')
    op.drop_index('idx_reservation_user_status', table_name='book_reservations')
    op.drop_index('idx_reservation_status_priority', table_name='book_reservations')
    op.drop_table('book_reservations')
    
    # Drop book_loans table
    op.drop_index('idx_loan_book_status', table_name='book_loans')
    op.drop_index('idx_loan_user_status', table_name='book_loans')
    op.drop_index('idx_loan_status_due_date', table_name='book_loans')
    op.drop_table('book_loans')
    op.drop_index('idx_user_role_status', table_name='users')
    op.drop_index('idx_user_email_status', table_name='users')
    op.drop_index('idx_user_created_at', table_name='users')
    op.alter_column('users', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.drop_column('users', 'failed_login_attempts')
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'status')
    op.alter_column('review_votes', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('request_logs', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.drop_constraint(None, 'books', type_='foreignkey')
    op.drop_constraint(None, 'books', type_='foreignkey')
    op.drop_index(op.f('ix_books_publisher'), table_name='books')
    op.drop_index(op.f('ix_books_language'), table_name='books')
    op.drop_index(op.f('ix_books_genre'), table_name='books')
    op.drop_index('idx_book_title_genre', table_name='books')
    op.drop_index('idx_book_publisher_year', table_name='books')
    op.drop_index('idx_book_popularity', table_name='books')
    op.drop_index('idx_book_created_at', table_name='books')
    op.drop_index('idx_book_availability', table_name='books')
    op.alter_column('books', 'updated_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('books', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('books', 'is_available',
               existing_type=sa.Boolean(),
               type_=mysql.INTEGER(),
               existing_nullable=False)
    op.drop_column('books', 'updated_by')
    op.drop_column('books', 'created_by')
    op.drop_column('books', 'popularity_score')
    op.drop_column('books', 'download_count')
    op.drop_column('books', 'view_count')
    op.drop_column('books', 'reserved_copies')
    op.alter_column('book_reviews', 'updated_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('book_reviews', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.drop_constraint(None, 'book_authors', type_='foreignkey')
    op.drop_constraint(None, 'book_authors', type_='foreignkey')
    op.create_foreign_key(op.f('book_authors_ibfk_2'), 'book_authors', 'authors', ['author_id'], ['id'])
    op.create_foreign_key(op.f('book_authors_ibfk_1'), 'book_authors', 'books', ['book_id'], ['id'])
    op.drop_column('book_authors', 'created_at')
    op.drop_column('book_authors', 'order')
    op.drop_column('book_authors', 'role')
    op.drop_constraint(None, 'authors', type_='foreignkey')
    op.drop_constraint(None, 'authors', type_='foreignkey')
    op.drop_index(op.f('ix_authors_nationality'), table_name='authors')
    op.drop_index('idx_author_name_nationality', table_name='authors')
    op.drop_index('idx_author_is_living', table_name='authors')
    op.drop_index('idx_author_created_at', table_name='authors')
    op.drop_index('idx_author_birth_year', table_name='authors')
    op.alter_column('authors', 'updated_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('authors', 'created_at',
               existing_type=mysql.DATETIME(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=True)
    op.alter_column('authors', 'is_living',
               existing_type=sa.Boolean(),
               type_=mysql.INTEGER(),
               nullable=True)
    op.drop_column('authors', 'updated_by')
    op.drop_column('authors', 'created_by')
    # ### end Alembic commands ###
